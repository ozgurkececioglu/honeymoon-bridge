/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/login': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['LoginRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              success: boolean;
              message: string;
              data?: components['schemas']['LoginResponse'];
              statusCode: number;
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/games/create': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['GamesCreateRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              success: boolean;
              message: string;
              data?: components['schemas']['GamesCreateRequest'];
              statusCode: number;
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/games/{id}/join': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['GamesJoinRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              success: boolean;
              message: string;
              data?: components['schemas']['GameInfo'];
              statusCode: number;
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/games': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              success: boolean;
              message: string;
              data?: components['schemas']['GameInfo'][];
              statusCode: number;
            };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/socket/authenticate': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['AuthenticateRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              success: boolean;
              message: string;
              data?: components['schemas']['AuthenticateResponse'];
              statusCode: number;
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/socket/join_room': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['JoinRoomRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              success: boolean;
              message: string;
              data?: components['schemas']['JoinRoomResponse'];
              statusCode: number;
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/socket/game_action': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['GameActionRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              success: boolean;
              message: string;
              data?: components['schemas']['GameActionResponse'];
              statusCode: number;
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    LoginResponse: {
      sessionId: string;
    };
    LoginRequest: {
      body: {
        username: string;
        password: string;
      };
    };
    GamesCreateRequest: {
      body: {
        name: string;
      };
    };
    GameInfo: {
      id: string;
      players: {
        id: string;
        username: string;
      }[];
      name: string;
      /** @enum {string} */
      status: 'waiting' | 'active' | 'completed';
      createdBy: string;
      createdAt: string;
    };
    GamesJoinRequest: {
      body: {
        /** Format: uuid */
        gameId: string;
      };
    };
    AuthenticateResponse: {
      type: string;
      success: boolean;
      message: string;
    };
    AuthenticateRequest: {
      sessionId: string;
    };
    JoinRoomResponse: {
      gameId: string;
      game: components['schemas']['GameInfo'];
    };
    JoinRoomRequest: {
      gameId?: string;
    };
    UpCard: {
      /** Format: uuid */
      id: string;
      /** @enum {string} */
      suit: 'hearts' | 'diamonds' | 'clubs' | 'spades';
      /** @enum {string} */
      rank: '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | 'J' | 'Q' | 'K' | 'A';
    };
    UpDownCards: {
      upCard: {
        /** Format: uuid */
        id: string;
        /** @enum {string} */
        suit: 'hearts' | 'diamonds' | 'clubs' | 'spades';
        /** @enum {string} */
        rank: '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | 'J' | 'Q' | 'K' | 'A';
      } | null;
      downCard: {
        /** Format: uuid */
        id: string;
      } | null;
    };
    DownCard: {
      /** Format: uuid */
      id: string;
    };
    ClientView: {
      /** @enum {string|null} */
      trumpSuit: 'hearts' | 'diamonds' | 'clubs' | 'spades' | 'none' | null;
      isActivePlayer: boolean;
      currentTrick: components['schemas']['UpCard'][];
      deck: {
        playerCardsOnTable: components['schemas']['UpDownCards'][];
        opponentCardsOnTable: components['schemas']['UpDownCards'][];
        opponentCardsOnHand: components['schemas']['DownCard'][];
        hasOpponentWonAnyTricks: boolean;
      } & (
        | {
            /** @enum {boolean} */
            hasPlayerWonAnyTricks: true;
            playerCardsOnHand: components['schemas']['UpCard'][];
          }
        | {
            /** @enum {boolean} */
            hasPlayerWonAnyTricks: false;
            playerCardsOnHand: components['schemas']['DownCard'][];
          }
      );
      allowedCardsToPlay: components['schemas']['UpCard'][] | null;
      currentRoundScore: {
        active: number;
        opponent: number;
      };
      activePlayerPlayedSuits: ('hearts' | 'diamonds' | 'clubs' | 'spades' | 'none')[];
      scoreboard: {
        hearts?: {
          active: number;
          opponent: number;
        };
        diamonds?: {
          active: number;
          opponent: number;
        };
        clubs?: {
          active: number;
          opponent: number;
        };
        spades?: {
          active: number;
          opponent: number;
        };
        none?: {
          active: number;
          opponent: number;
        };
      };
      isGameOver: boolean;
      winner: {
        id: string;
        username: string;
      } | null;
    };
    GameActionRequest: {
      /** Format: uuid */
      gameId: string;
      action:
        | {
            /** @enum {string} */
            type: 'select_trump';
            payload: {
              /** @enum {string} */
              trump: 'hearts' | 'diamonds' | 'clubs' | 'spades' | 'none';
            };
          }
        | {
            /** @enum {string} */
            type: 'play_card';
            payload: {
              card: components['schemas']['UpCard'];
            };
          };
    };
    GameActionResponse: components['schemas']['GameActionRequest'] & {
      view: components['schemas']['ClientView'];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
